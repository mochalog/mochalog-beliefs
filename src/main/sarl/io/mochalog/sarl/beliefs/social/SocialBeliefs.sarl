/**
 * Copyright 2017 The Mochalog-SARL-Beliefs Authors.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.mochalog.sarl.beliefs.social

import io.mochalog.sarl.beliefs.query.BeliefQuery

import io.mochalog.sarl.beliefs.social.analysis.ExperimentEvaluator
import io.mochalog.sarl.beliefs.social.analysis.contest.AgentContest
import io.mochalog.sarl.beliefs.social.analysis.contest.AgentContestBallot
import io.mochalog.sarl.beliefs.social.analysis.poll.SocialPoll
import io.mochalog.sarl.beliefs.social.analysis.poll.SocialPollBallot

import io.sarl.lang.core.Address
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.Scope

import java.util.List
import java.util.Set
import java.util.UUID

/** 
 * Capacity facilitating social interaction between
 * agents by providing means of asking declarative 
 * questions of each other about beliefs and answering.
 */
capacity SocialBeliefs
{
    /**
     * Ask a query inside a space.
     * @param space Space to ask question in
     * @param scope Scope of the query (specification of receivers of query)
     * @param query Query to ask
     * @param args Arguments to format query with
     */
    def askIn(^space : EventSpace, scope : Scope<Address> = null, 
        query : String, args : Object*)
    
    /**
     * Ask a query inside a space.
     * @param space Space to ask question in
     * @param scope Scope of the query (specification of receivers of query)
     * @param query Query to ask
     */
    def askIn(^space : EventSpace, scope : Scope<Address> = null, 
        query : BeliefQuery)

    /**
     * Tell members of a given space about a belief
     * that is entailed by one's knowledge base.
     * @param space Space to disclose in
     * @param scope Scope of the disclosure (specification of receivers of disclosure)
     * @param disclosure Disclosure of beliefs
     */
    def tellIn(^space : EventSpace, scope : Scope<Address> = null,
        disclosure : BeliefDisclosure)
    
    /**
     * Directly answer a given query.
     * @param query Query to answer
     * @param disclosure Disclosure of beliefs
     * @return True if query was able to be successfully
     * answered, false otherwise.
     */
    def answer(query : BeliefQuery, disclosure : BeliefDisclosure) : boolean
    
    /**
     * Determine if all agents in a space
     * possess knowledge bases which entail the specified
     * query. Enact a plan after fetching the result.
     * <p>
     * If not all responses have been received before the
     * timeout has elapsed, assumption is made that the
     * query is not believed by all.
     * @param space Space to ask question in
     * @param scope Scope of the question
     * @param query Query to ask
     * @param timeout Time to wait for responses in ms
     * (defaults to 2000)
     * @param plan Plan to enact following response gathering
     * @return Social poll in progress
     */
    def isBelievedByAll(^space : EventSpace, scope : Scope<Address> = null,
        query : BeliefQuery, timeout : long = 2000, plan : (boolean) => void)
        : SocialPoll
        
    /**
     * Determine if at least one agent in a space
     * possesses a knowledge base which entails the specified
     * query. Enact a plan after fetching the result.
     * <p>
     * If no positive responses have been received before the
     * timeout has elapsed, assumption is made that no agents
     * believe the query.
     * @param space Space to ask question in
     * @param scope Scope of the question
     * @param query Query to ask
     * @param timeout Time to wait for responses in ms
     * (defaults to 2000)
     * @param plan Plan to enact following response gathering
     * @return Social poll in progress
     */
    def isBelievedByAny(^space : EventSpace, scope : Scope<Address> = null,
        query : BeliefQuery, timeout : long = 2000, plan : (boolean) => void)
        : SocialPoll
        
    /**
     * Determine if no agents in the space possess 
     * a knowledge base which entails the specified query.
     * Enact a plan after fetching the result.
     * <p>
     * If not all responses have been received before the
     * timeout has elapsed, assumption is made that the
     * query may be believed by some.
     * @param space Space to ask question in
     * @param scope Scope of the question
     * @param query Query to ask
     * @param timeout Time to wait for responses in ms
     * (defaults to 2000)
     * @param plan Plan to enact following response gathering
     * @return Social poll in progress
     */
    def isBelievedByNone(^space : EventSpace, scope : Scope<Address> = null,
        query : BeliefQuery, timeout : long = 2000, plan : (boolean) => void)
        : SocialPoll
    
    /**
     * Determine if all agents in a space agree that
     * a given query aligns with the hypothesis provided by
     * isTrue.
     * <p>
     * If not all responses have been received before the
     * timeout has elapsed, assumption is made that the
     * query is not agreed upon by all.
     * @param space Space to ask question in
     * @param scope Scope of the question
     * @param query Query to ask
     * @param isTrue Whether all should agree that query is true, or not.
     * @param timeout Time to wait for responses in ms
     * (defaults to 2000)
     * @param plan Plan to enact following response gathering
     * @return Social poll in progress
     */
    def allBelieveThat(^space : EventSpace, scope : Scope<Address> = null, query : BeliefQuery, 
        isTrue : boolean, timeout : long = 2000, plan : (boolean) => void) 
        : SocialPoll
    
    /**
     * Conduct a belief poll on participants of a space.
     * Allows for aggregation and analysis of responses.
     * @param space Space to conduct poll in
     * @param scope Scope of the poll
     * @param query Query to seed poll with
     * @param timeout Maximum poll duration in ms
     * @param evaluator Poll evaluation function
     * @param onResult Plan to execute on result computation
     * @return Social poll in progress
     */
    def conductPoll(^space : EventSpace, scope : Scope<Address> = null, query : BeliefQuery, 
        timeout : long = 2000, evaluator : ExperimentEvaluator<SocialPollBallot>,
        onResult : (boolean) => void) : SocialPoll

    /**
     * Organise a contest in a given space. Agents
     * may enter and answer a given query to assess
     * their preliminary eligibility for the contest.
     * Eligible entrants will then be selected from as
     * contest winners (multiple winners possible).
     * @param space Space to organise contest in
     * @param scope Scope of the contest
     * @param eligibilityQuery Query to assess entrant eligibility
     * @param timeout Maximum contest duration in ms
     * @param evaluator Contest evaluation function (defaults to
     * assumption that positive responses are eligible)
     * @param winnerSelector Function for filtering winners from
     * eligible entrants
     * @return Contest in progress
     */
    def organiseContest(^space : EventSpace, scope : Scope<Address> = null, 
        eligibilityQuery : BeliefQuery, timeout : long = 2000, 
        evaluator : ExperimentEvaluator<AgentContestBallot> = null, 
        winnerSelector : (Set<UUID>) => List<UUID>) : AgentContest
}